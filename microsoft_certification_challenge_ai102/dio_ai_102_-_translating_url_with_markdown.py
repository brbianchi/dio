# -*- coding: utf-8 -*-
"""dio_ai_102_-_translating_url_with_markdown.ipynb

Automatically generated by Colab.=
"""

!pip install requests beautifulsoup4 openai langchain-openai

import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
    response = requests.get(url)

    if response.status_code == 200:
      soup = BeautifulSoup(response.text, 'html.parser')
      for script_or_style in soup(["script", "style"]):
        script_or_style.decompose()
      text = soup.get_text(separator=' ')
      #Limpar texto
      lines = (line.strip() for line in text.splitlines())
      chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
      clear_text = '\n'.join(chunk for chunk in chunks if chunk)
      return clear_text
    else:
        raise Exception(f"Failed to fetch URL {url}. Status code: {response.status_code}")

    text = soup.get_text()
    return text

extract_text_from_url('https://dev.to/hrk2023/markdown-preview-in-vim-44bl')

from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI(
    azure_endpoint="https://oai-dio-translator.openai.azure.com/",
    api_key="MINHA CHAVE AQUI",
    api_version="2024-02-15-preview",
    deployment_name="gpt-4o-mini",
    max_retries=0
)

def translate_article(text, lang):
  messages = [
      ("system", "VocÃª atua como um tradutor de textos"),
      ("user", f"Traduza o {text} para o idioma {lang} e responsa em markdown")
  ]

  response = client.invoke(messages)
  print(response.content)
  return(response.content)

translate_article("let's see if this works", "pt-br")

url = 'https://dev.to/hrk2023/markdown-preview-in-vim-44bl'
text = extract_text_from_url(url)
article = translate_article(text, "pt-br")

print(article)